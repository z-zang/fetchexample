{"version":3,"sources":["PokeDiv.js","App.js","serviceWorker.js","index.js"],"names":["PokeDiv","_useState","useState","_useState2","Object","slicedToArray","image","setImage","_useState3","_useState4","name","setName","fetchPkmn","_fetchPkmn","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","rand","res","response","wrap","_context","prev","next","Math","floor","random","fetch","concat","sent","json","console","log","sprites","front_default","stop","useEffect","react_default","createElement","src","alt","onClick","App","className","src_PokeDiv","Boolean","window","location","hostname","match","ReactDOM","render","src_App","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNA6BeA,MA3Bf,WAAmB,IAAAC,EACSC,mBAAS,IADlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACHI,EADGJ,EAAA,GAAAK,EAEON,mBAAS,IAFhBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEVE,EAFUD,EAAA,GAEJE,EAFIF,EAAA,YAIFG,IAJE,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAT,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KAIjB,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACMN,EAAOO,KAAKC,MAAsB,IAAhBD,KAAKE,UAD7BL,EAAAE,KAAA,EAEkBI,MAAK,qCAAAC,OAAsCX,IAF7D,cAEMC,EAFNG,EAAAQ,KAAAR,EAAAE,KAAA,EAGuBL,EAAIY,OAH3B,OAGMX,EAHNE,EAAAQ,KAIEE,QAAQC,IAAIb,GACZjB,EAASiB,EAASc,QAAQC,eAC1B5B,EAAQa,EAASd,MANnB,yBAAAgB,EAAAc,SAAAnB,OAJiBP,MAAAC,KAAAC,WAiBjB,OAJAyB,oBAAU,WACR7B,KACC,IAGD8B,EAAAvB,EAAAwB,cAAA,WACED,EAAAvB,EAAAwB,cAAA,UAAKjC,GACLgC,EAAAvB,EAAAwB,cAAA,OAAKC,IAAG,GAAAX,OAAK3B,GAASuC,IAAI,KAC1BH,EAAAvB,EAAAwB,cAAA,WACAD,EAAAvB,EAAAwB,cAAA,UAAQG,QAASlC,GAAjB,6BCRSmC,MAZf,WAEE,OACEL,EAAAvB,EAAAwB,cAAA,OAAKK,UAAU,OACbN,EAAAvB,EAAAwB,cAACM,EAAD,MACAP,EAAAvB,EAAAwB,cAACM,EAAD,MACAP,EAAAvB,EAAAwB,cAACM,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAvB,EAAAwB,cAACc,EAAD,CAAKC,SAAUC,2BAA2BC,SAASC,eAAe,SD2H5E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c614e794.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction PokeDiv() {\n  const [image, setImage] = useState(\"\")\n  const [name, setName] = useState(\"\")\n\n  async function fetchPkmn() {\n    var rand = Math.floor(Math.random() * 792)\n    var res = await fetch(`https://pokeapi.co/api/v2/pokemon/${rand}`)\n    let response = await res.json()\n    console.log(response)\n    setImage(response.sprites.front_default)\n    setName(response.name)\n  }\n\n  useEffect(() => {\n    fetchPkmn()\n  }, [])\n\n  return(\n    <div>\n      <h2>{name}</h2>\n      <img src={`${image}`} alt=\"\"/>\n      <br/>\n      <button onClick={fetchPkmn}>Change Pok√©mon</button>\n    </div>\n  ) \n}\n\nexport default PokeDiv","import React from 'react';\nimport PokeDiv from './PokeDiv';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PokeDiv />\n      <PokeDiv />\n      <PokeDiv />\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App basename={process.env.PUBLIC_URL}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}